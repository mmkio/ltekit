{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout 1 2 3 4 mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Project layout"},{"location":"app-gps/","text":"GPS \uc218\uc2e0\uac12 \uac00\uc838\uc624\uae30 1.\ud504\ub85c\uadf8\ub7a8 \ub2e4\uc6b4\ub85c\ub4dc 1 2 pi > cd ~ pi > wget github . com / letmodule / gpstest . py 1.\ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 1 pi > sudo python gpstest . py \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 from time import sleep import serial portwrite = \"/dev/ttyUSB2\" port = \"/dev/ttyUSB1\" def parseGPS ( data ): print \"raw:\" , data #prints raw data if data [ 0 : 6 ] == \"$GPRMC\" : sdata = data . split ( \",\" ) if sdata [ 2 ] == 'V' : print \"no satellite data available\" return print \"-----Parsing GPRMC-----\" time = sdata [ 1 ][ 0 : 2 ] + \":\" + sdata [ 1 ][ 2 : 4 ] + \":\" + sdata [ 1 ][ 4 : 6 ] lat = decode ( sdata [ 3 ]) #latitude dirLat = sdata [ 4 ] #latitude direction N/S lon = decode ( sdata [ 5 ]) #longitute dirLon = sdata [ 6 ] #longitude direction E/W speed = sdata [ 7 ] #Speed in knots trCourse = sdata [ 8 ] #True course date = sdata [ 9 ][ 0 : 2 ] + \"/\" + sdata [ 9 ][ 2 : 4 ] + \"/\" + sdata [ 9 ][ 4 : 6 ] #date variation = sdata [ 10 ] #variation degreeChecksum = sdata [ 12 ] dc = degreeChecksum . split ( \"*\" ) degree = dc [ 0 ] #degree checksum = dc [ 1 ] #checksum print \"time : %s , latitude : %s ( %s ), longitude : %s ( %s ), speed : %s , True Course : % s , Date : % s , Magnetic Variation : % s ( % s ), Checksum : % s \"% (time,lat,dirLat,lon,dirLon,speed,trCourse,date,variation,degree,checksum) else : print \"Printed data is \" , data [ 0 : 6 ] def decode ( coord ): #Converts DDDMM.MMMMM -> DD deg MM.MMMMM min x = coord . split ( \".\" ) head = x [ 0 ] tail = x [ 1 ] deg = head [ 0 : - 2 ] min = head [ - 2 :] return deg + \" deg \" + min + \".\" + tail + \" min\" print \"Connecting port\" serw = serial . Serial ( portwrite , baudrate = 115200 , timeout = 1 , rtscts = True , dsrdtr = True ) serw . write ( 'AT+QGPS=1 \\r ' ) serw . close () sleep ( 0.5 ) print \"Receiving GPS data\" ser = serial . Serial ( port , baudrate = 115200 , timeout = 0.5 , rtscts = True , dsrdtr = True ) while True : data = ser . readline () parseGPS ( data )","title":"GPS \uc2e0\ud638 \uc218\uc2e0"},{"location":"app-gps/#gps","text":"1.\ud504\ub85c\uadf8\ub7a8 \ub2e4\uc6b4\ub85c\ub4dc 1 2 pi > cd ~ pi > wget github . com / letmodule / gpstest . py 1.\ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 1 pi > sudo python gpstest . py \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 from time import sleep import serial portwrite = \"/dev/ttyUSB2\" port = \"/dev/ttyUSB1\" def parseGPS ( data ): print \"raw:\" , data #prints raw data if data [ 0 : 6 ] == \"$GPRMC\" : sdata = data . split ( \",\" ) if sdata [ 2 ] == 'V' : print \"no satellite data available\" return print \"-----Parsing GPRMC-----\" time = sdata [ 1 ][ 0 : 2 ] + \":\" + sdata [ 1 ][ 2 : 4 ] + \":\" + sdata [ 1 ][ 4 : 6 ] lat = decode ( sdata [ 3 ]) #latitude dirLat = sdata [ 4 ] #latitude direction N/S lon = decode ( sdata [ 5 ]) #longitute dirLon = sdata [ 6 ] #longitude direction E/W speed = sdata [ 7 ] #Speed in knots trCourse = sdata [ 8 ] #True course date = sdata [ 9 ][ 0 : 2 ] + \"/\" + sdata [ 9 ][ 2 : 4 ] + \"/\" + sdata [ 9 ][ 4 : 6 ] #date variation = sdata [ 10 ] #variation degreeChecksum = sdata [ 12 ] dc = degreeChecksum . split ( \"*\" ) degree = dc [ 0 ] #degree checksum = dc [ 1 ] #checksum print \"time : %s , latitude : %s ( %s ), longitude : %s ( %s ), speed : %s , True Course : % s , Date : % s , Magnetic Variation : % s ( % s ), Checksum : % s \"% (time,lat,dirLat,lon,dirLon,speed,trCourse,date,variation,degree,checksum) else : print \"Printed data is \" , data [ 0 : 6 ] def decode ( coord ): #Converts DDDMM.MMMMM -> DD deg MM.MMMMM min x = coord . split ( \".\" ) head = x [ 0 ] tail = x [ 1 ] deg = head [ 0 : - 2 ] min = head [ - 2 :] return deg + \" deg \" + min + \".\" + tail + \" min\" print \"Connecting port\" serw = serial . Serial ( portwrite , baudrate = 115200 , timeout = 1 , rtscts = True , dsrdtr = True ) serw . write ( 'AT+QGPS=1 \\r ' ) serw . close () sleep ( 0.5 ) print \"Receiving GPS data\" ser = serial . Serial ( port , baudrate = 115200 , timeout = 0.5 , rtscts = True , dsrdtr = True ) while True : data = ser . readline () parseGPS ( data )","title":"GPS \uc218\uc2e0\uac12 \uac00\uc838\uc624\uae30"},{"location":"app-livestream/","text":"LiveStream \uc601\uc0c1\ubcf4\ub0b4\uae30 Sixfab 3G/LTE Shields provides very high speed internet connection. Use Raspberry Pi camera and you can make live stream to Youtube and Facebook. You can use following transactions for work. 1.Firstly, Connect your Raspberry Pi to internet and run sudo apt-get update to update your Raspberry Pi 2.Make Tutorial3 to connect internet over Mobile. 3.For live stream you can use FFMpeg. 3.1 Install h264 Support - cd /usr/src - git clone git://git.videolan.org/x264 - cd x264 - ./configure --host=arm-unknown-linux-gnueabi --enable-static --disable-opencl - make - sudo make install 3.2. Install FFMpeg - cd /usr/src - git clone https://github.com/FFmpeg/FFmpeg.git - cd ffmpeg - sudo ./configure --arch=armel --target-os=linux --enable-gpl --enable-libx264 --enable-nonfree - make if you have a Model B+ and later version, you can use make -j4 instead of just make to take advantage of all four cores! - sudo make install 4.Signup for a facebook or youtube account and get [SERVER URL]/[STREAM NAME] 5.At last, run this command to start live raspivid -o - -t 0 -vf -hf -fps 30 -b 6000000 | ffmpeg -re -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -f h264 -i - -vcodec copy -acodec aac -ab 128k -g 50 -strict experimental -f flv [SERVER URL]/[STREAM NAME]","title":"\ub3d9\uc601\uc0c1 \uc804\uc1a1"},{"location":"app-livestream/#livestream","text":"Sixfab 3G/LTE Shields provides very high speed internet connection. Use Raspberry Pi camera and you can make live stream to Youtube and Facebook. You can use following transactions for work. 1.Firstly, Connect your Raspberry Pi to internet and run sudo apt-get update to update your Raspberry Pi 2.Make Tutorial3 to connect internet over Mobile. 3.For live stream you can use FFMpeg. 3.1 Install h264 Support - cd /usr/src - git clone git://git.videolan.org/x264 - cd x264 - ./configure --host=arm-unknown-linux-gnueabi --enable-static --disable-opencl - make - sudo make install 3.2. Install FFMpeg - cd /usr/src - git clone https://github.com/FFmpeg/FFmpeg.git - cd ffmpeg - sudo ./configure --arch=armel --target-os=linux --enable-gpl --enable-libx264 --enable-nonfree - make if you have a Model B+ and later version, you can use make -j4 instead of just make to take advantage of all four cores! - sudo make install 4.Signup for a facebook or youtube account and get [SERVER URL]/[STREAM NAME] 5.At last, run this command to start live raspivid -o - -t 0 -vf -hf -fps 30 -b 6000000 | ffmpeg -re -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -f h264 -i - -vcodec copy -acodec aac -ab 128k -g 50 -strict experimental -f flv [SERVER URL]/[STREAM NAME]","title":"LiveStream \uc601\uc0c1\ubcf4\ub0b4\uae30"},{"location":"app-mail/","text":"\uba54\uc77c \ubcf4\ub0b4\uae30 Register a Twitter App with this tutorial to get Consumer Key etc. Install Python and required libraries with following commands sudo apt-get install python-setuptools sudo easy_install pip sudo pip install smtplib Download source code Link wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial7/SecuritySystem.py Make it executable sudo chmod +x SecuritySystem.py Run it sudo python SecuritySystem.py \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 import RPi.GPIO as GPIO import picamera from time import sleep from email.mime.text import MIMEText from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart # xyz@xyz.com is an example. You can configure. fromEmail = 'abc@xyz.com' password = 'XXXXXX' toEmail = 'xyz@xyz.com' smtpEmail = 'smtp.xyz.com' smtpPort = 587 def SendMail ( ImgFileName ): img_data = open ( ImgFileName , 'rb' ) . read () msg = MIMEMultipart () msg [ 'Subject' ] = 'Security System' msg [ 'From' ] = 'Raspberry Pi' msg [ 'To' ] = toEmail text = MIMEText ( \"Raspberry Security System\" ) msg . attach ( text ) image = MIMEImage ( img_data , name = os . path . basename ( ImgFileName )) msg . attach ( image ) s = smtplib . SMTP ( smtpEmail , smtpPort ) s . ehlo () s . starttls () s . ehlo () s . login ( fromEmail , password ) s . sendmail ( fromEmail , toEmail , msg . as_string ()) s . quit () camera = picamera . PiCamera () camera . exposure_mode = 'sports' camera . resolution = ( 320 , 240 ) GPIO . setmode ( GPIO . BCM ) GPIO . setup ( 21 , GPIO . IN , pull_up_down = GPIO . PUD_DOWN ) var = 1 while var == 1 : if ( GPIO . input ( 21 ) != 1 ): print GPIO . input ( 21 ) print ( \"low\" ) else : print ( \"high\" ) camera . capture ( 'image.jpg' ) print ( 'photo captured' ) print ( 'photo opened and sending' ) SendMail ( 'image.jpg' ) print ( \"photo sended\" ) time . sleep ( 10 )","title":"\uba54\uc77c \ubcf4\ub0b4\uae30"},{"location":"app-mail/#_1","text":"Register a Twitter App with this tutorial to get Consumer Key etc. Install Python and required libraries with following commands sudo apt-get install python-setuptools sudo easy_install pip sudo pip install smtplib Download source code Link wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial7/SecuritySystem.py Make it executable sudo chmod +x SecuritySystem.py Run it sudo python SecuritySystem.py \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 import RPi.GPIO as GPIO import picamera from time import sleep from email.mime.text import MIMEText from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart # xyz@xyz.com is an example. You can configure. fromEmail = 'abc@xyz.com' password = 'XXXXXX' toEmail = 'xyz@xyz.com' smtpEmail = 'smtp.xyz.com' smtpPort = 587 def SendMail ( ImgFileName ): img_data = open ( ImgFileName , 'rb' ) . read () msg = MIMEMultipart () msg [ 'Subject' ] = 'Security System' msg [ 'From' ] = 'Raspberry Pi' msg [ 'To' ] = toEmail text = MIMEText ( \"Raspberry Security System\" ) msg . attach ( text ) image = MIMEImage ( img_data , name = os . path . basename ( ImgFileName )) msg . attach ( image ) s = smtplib . SMTP ( smtpEmail , smtpPort ) s . ehlo () s . starttls () s . ehlo () s . login ( fromEmail , password ) s . sendmail ( fromEmail , toEmail , msg . as_string ()) s . quit () camera = picamera . PiCamera () camera . exposure_mode = 'sports' camera . resolution = ( 320 , 240 ) GPIO . setmode ( GPIO . BCM ) GPIO . setup ( 21 , GPIO . IN , pull_up_down = GPIO . PUD_DOWN ) var = 1 while var == 1 : if ( GPIO . input ( 21 ) != 1 ): print GPIO . input ( 21 ) print ( \"low\" ) else : print ( \"high\" ) camera . capture ( 'image.jpg' ) print ( 'photo captured' ) print ( 'photo opened and sending' ) SendMail ( 'image.jpg' ) print ( \"photo sended\" ) time . sleep ( 10 )","title":"\uba54\uc77c \ubcf4\ub0b4\uae30"},{"location":"app-twitter/","text":"\ud2b8\uc704\ud2b8 \uba54\uc2dc\uc9c0 \ubcf4\ub0b4\uae30 or 3G/LTE Shield - Make Tutorial 3 to connect internet over Mobile. Register a Twitter App with this tutorial to get Consumer Key etc. Install Python and required libraries with following commands sudo apt-get install python-setuptools sudo easy_install pip sudo pip install twython Download source code Link wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial5/Tiwitting.py Make it executable sudo chmod +x Tiwitting.py Let's send tweet python Tiwitting.py 'Hello Everyone, I am using Sixfab Iot Shield!' https://stackabuse.com/accessing-the-twitter-api-with-python/ \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import sys import picamera from twython import Twython CONSUMER_KEY = '***************YOUR DATA*****************' CONSUMER_SECRET = '***************YOUR DATA*****************' ACCESS_KEY = '***************YOUR DATA*****************' ACCESS_SECRET = '***************YOUR DATA*****************' api = Twython ( CONSUMER_KEY , CONSUMER_SECRET , ACCESS_KEY , ACCESS_SECRET ) camera = picamera . PiCamera () camera . resolution = ( 1024 , 768 ) camera . capture ( 'image.jpg' ) photo = open ( 'image.jpg' , 'rb' ) api . update_status_with_media ( media = photo , status = sys . argv [ 1 ])","title":"\ud2b8\uc704\ud2b8 \ubcf4\ub0b4\uae30"},{"location":"app-twitter/#_1","text":"or 3G/LTE Shield - Make Tutorial 3 to connect internet over Mobile. Register a Twitter App with this tutorial to get Consumer Key etc. Install Python and required libraries with following commands sudo apt-get install python-setuptools sudo easy_install pip sudo pip install twython Download source code Link wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial5/Tiwitting.py Make it executable sudo chmod +x Tiwitting.py Let's send tweet python Tiwitting.py 'Hello Everyone, I am using Sixfab Iot Shield!' https://stackabuse.com/accessing-the-twitter-api-with-python/ \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import sys import picamera from twython import Twython CONSUMER_KEY = '***************YOUR DATA*****************' CONSUMER_SECRET = '***************YOUR DATA*****************' ACCESS_KEY = '***************YOUR DATA*****************' ACCESS_SECRET = '***************YOUR DATA*****************' api = Twython ( CONSUMER_KEY , CONSUMER_SECRET , ACCESS_KEY , ACCESS_SECRET ) camera = picamera . PiCamera () camera . resolution = ( 1024 , 768 ) camera . capture ( 'image.jpg' ) photo = open ( 'image.jpg' , 'rb' ) api . update_status_with_media ( media = photo , status = sys . argv [ 1 ])","title":"\ud2b8\uc704\ud2b8 \uba54\uc2dc\uc9c0 \ubcf4\ub0b4\uae30"},{"location":"index - \ubcf5\uc0ac\ubcf8/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout 1 2 3 4 mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Welcome to MkDocs"},{"location":"index - \ubcf5\uc0ac\ubcf8/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index - \ubcf5\uc0ac\ubcf8/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"index - \ubcf5\uc0ac\ubcf8/#project-layout","text":"1 2 3 4 mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Project layout"},{"location":"install/","text":"Raspberry Pi Kernel update for 3G/LTE shield's usb drivers Original Raspbian Jessie kernel version 4.4 doesn't support Quectel EC25/UC20 modules, you can update your Raspberry Pi's kernel. Run sudo rpi-update command and update kernel your Raspberry pi Reboot your machine 1 #> sudo reboot You can use your modem with /dev/ttyUSB3 1 #> ls / dev / ttyUSB * Issues: If ttyUSB3 does not appear under folder /dev/ when the 3G ( UC20 ) module is plugged in, and 'device not accepting device address XXX, error -71' appears on the 'dmesg' output, please change your USB cable.","title":"Raspberry Pi Kernel update for 3G/LTE shield's usb drivers"},{"location":"install/#raspberry-pi-kernel-update-for-3glte-shields-usb-drivers","text":"Original Raspbian Jessie kernel version 4.4 doesn't support Quectel EC25/UC20 modules, you can update your Raspberry Pi's kernel. Run sudo rpi-update command and update kernel your Raspberry pi Reboot your machine 1 #> sudo reboot You can use your modem with /dev/ttyUSB3 1 #> ls / dev / ttyUSB * Issues: If ttyUSB3 does not appear under folder /dev/ when the 3G ( UC20 ) module is plugged in, and 'device not accepting device address XXX, error -71' appears on the 'dmesg' output, please change your USB cable.","title":"Raspberry Pi Kernel update for 3G/LTE shield's usb drivers"},{"location":"lte-kit/","text":"LTE \ud1b5\uc2e0 \ud14c\uc2a4\ud2b8 Kit 3G/4G/LTE \ud1b5\uc2e0 \ubaa8\ub4c8\uc740 \ud3b8\ub9ac\ud558\uac8c PC \ubc0f \uc784\ubca0\ub514\ub4dc \uc7a5\uce58\uc5d0\uc11c \uc778\ud130\ub137 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud55c\ub2e4. IoT \uc81c\uc5b4\ub97c \uc704\ud55c \uace0\uc18d \uc804\uc1a1 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uba70 \ub3d9\uc601\uc0c1\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\ub294 \uace0\uc18d \ud1b5\uc2e0 \ubaa8\ub4c8\uc774\ub2e4. Description Adding ultra-fast cellular internet communication feature to your Raspberry Pi has never been easier until you get this shield. This is a handy interface bridge between Mini PCIe 3G/4G/LTE modules and Raspberry Pi. You can easily insert a Mini PCIe module in this shield then start using cellular internet with your Raspberry Pi. Both UART and USB communication with modules is available. It can be used as an LTE modem or dongle. If you\u2019re looking for a Raspberry Pi LTE HAT for applications like Raspberry Pi video streaming or high-speed data transferring, this Sixfab Base Shield is here to help. Making a remote controllable LTE Wi-Fi Hotspot, high-speed GPS tracking, VoIP, more and more use case is possible with his add-on board. Depends on your region and data rate need, you can choose an LTE module from a variety of options are available in the market from different cellular module vendors. The full list of the compatible modules mentioned below. For a global 3G coverage, we suggest Quectel UC20 3G Module, and for high-speed LTE connection, we suggest Quectel EC25 LTE Module, are available at Sixfab right now. Features Fully compatible with Raspberry Pi models that have the 40-pin GPIO header (3, 2, B+, A+, Zero) Easy-to-use, simple setup, plug-and-play Clip-in Mini PCIe socket compatible with worldwide LTE, UMTS/HSPA+ and GSM/GPRS/EDGE coverage with regional or global modules which work with different frequencies&carriers With the 4G/LTE Module(e.g Quectel EC25) you can reach 150Mbps downlink and 50Mbps uplink data rates. And the 3G Module( e.g Quectel UC20) delivers the maximum data rate of 14.4Mbps downlink and 5.76Mbps uplink. Micro SIM Card socket can easily reachable on the upside of the shield. Can be used standalone with PC/Laptop over micro USB, without stacking with Raspberry Pi. The shield can be powered from an external 5V source by exposed power pins, directly from Raspberry Pi 5V GPIO headers or over micro USB. A specially designed 90-degree right angle micro USB cable is included to package as a gift by default. Efficient and low quiescent current regulator circuit can hold up to 3.6A Optional Send/Receive commands over Raspberry Pi UART port is available Taking the module into the Airplane Mode, resetting module or RI and DTR functions can be done over GPIO pins. The modules(EC25&UC20) have built-in GNSS(GPS/GLONASS) receiver for your location-based applications. Working temperature range: -40\u00b0C ~ 80\u00b0C Key Applications Video/Music Streaming Large Data Downloads and Uploads LTE Dongle/Router Mobile Internet Hotspot High-speed GPS Tracking Real-time Environmental Monitoring Smart City & Agriculture Applications Smart Parking Security & Asset tracking Compatible Boards Raspberry Pi 3, 2, B+, A+, Zero ubuntu Linux PC Window OS PC Package Includes 1x 3G/4G-LTE Base USB shield. USB Connection Cable ( Shield <--> USB HOST(Board)) Antenna LTE Full Band PCB Antenna Sim Card (LTE \ud1b5\uc2e0 \ud14c\uc2a4\ud2b8\uc6a9 5\uc77c,10\uc77c)","title":"\ud0a4\ud2b8\uad6c\uc131"},{"location":"lte-kit/#lte-kit","text":"3G/4G/LTE \ud1b5\uc2e0 \ubaa8\ub4c8\uc740 \ud3b8\ub9ac\ud558\uac8c PC \ubc0f \uc784\ubca0\ub514\ub4dc \uc7a5\uce58\uc5d0\uc11c \uc778\ud130\ub137 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud55c\ub2e4. IoT \uc81c\uc5b4\ub97c \uc704\ud55c \uace0\uc18d \uc804\uc1a1 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uba70 \ub3d9\uc601\uc0c1\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\ub294 \uace0\uc18d \ud1b5\uc2e0 \ubaa8\ub4c8\uc774\ub2e4.","title":"LTE \ud1b5\uc2e0 \ud14c\uc2a4\ud2b8 Kit"},{"location":"lte-kit/#description","text":"Adding ultra-fast cellular internet communication feature to your Raspberry Pi has never been easier until you get this shield. This is a handy interface bridge between Mini PCIe 3G/4G/LTE modules and Raspberry Pi. You can easily insert a Mini PCIe module in this shield then start using cellular internet with your Raspberry Pi. Both UART and USB communication with modules is available. It can be used as an LTE modem or dongle. If you\u2019re looking for a Raspberry Pi LTE HAT for applications like Raspberry Pi video streaming or high-speed data transferring, this Sixfab Base Shield is here to help. Making a remote controllable LTE Wi-Fi Hotspot, high-speed GPS tracking, VoIP, more and more use case is possible with his add-on board. Depends on your region and data rate need, you can choose an LTE module from a variety of options are available in the market from different cellular module vendors. The full list of the compatible modules mentioned below. For a global 3G coverage, we suggest Quectel UC20 3G Module, and for high-speed LTE connection, we suggest Quectel EC25 LTE Module, are available at Sixfab right now.","title":"Description"},{"location":"lte-kit/#features","text":"Fully compatible with Raspberry Pi models that have the 40-pin GPIO header (3, 2, B+, A+, Zero) Easy-to-use, simple setup, plug-and-play Clip-in Mini PCIe socket compatible with worldwide LTE, UMTS/HSPA+ and GSM/GPRS/EDGE coverage with regional or global modules which work with different frequencies&carriers With the 4G/LTE Module(e.g Quectel EC25) you can reach 150Mbps downlink and 50Mbps uplink data rates. And the 3G Module( e.g Quectel UC20) delivers the maximum data rate of 14.4Mbps downlink and 5.76Mbps uplink. Micro SIM Card socket can easily reachable on the upside of the shield. Can be used standalone with PC/Laptop over micro USB, without stacking with Raspberry Pi. The shield can be powered from an external 5V source by exposed power pins, directly from Raspberry Pi 5V GPIO headers or over micro USB. A specially designed 90-degree right angle micro USB cable is included to package as a gift by default. Efficient and low quiescent current regulator circuit can hold up to 3.6A Optional Send/Receive commands over Raspberry Pi UART port is available Taking the module into the Airplane Mode, resetting module or RI and DTR functions can be done over GPIO pins. The modules(EC25&UC20) have built-in GNSS(GPS/GLONASS) receiver for your location-based applications. Working temperature range: -40\u00b0C ~ 80\u00b0C","title":"Features"},{"location":"lte-kit/#key-applications","text":"Video/Music Streaming Large Data Downloads and Uploads LTE Dongle/Router Mobile Internet Hotspot High-speed GPS Tracking Real-time Environmental Monitoring Smart City & Agriculture Applications Smart Parking Security & Asset tracking","title":"Key Applications"},{"location":"lte-kit/#compatible-boards","text":"Raspberry Pi 3, 2, B+, A+, Zero ubuntu Linux PC Window OS PC","title":"Compatible Boards"},{"location":"lte-kit/#package-includes","text":"1x 3G/4G-LTE Base USB shield. USB Connection Cable ( Shield <--> USB HOST(Board)) Antenna LTE Full Band PCB Antenna Sim Card (LTE \ud1b5\uc2e0 \ud14c\uc2a4\ud2b8\uc6a9 5\uc77c,10\uc77c)","title":"Package Includes"},{"location":"ppp_connect/","text":"Make a PPP internet connection with 3G/LTE Shields on Raspberry Pi You can use Sixfab 3G/LTE Shields to connect internet with PPP connection. You can use following transactions for work. Firstly, Connect your Raspberry Pi to internet and run sudo apt-get update to update your Raspberry Pi Make First Tutorial to add Quectel Module support to your kernel. Download ppp-creator.sh script and run. Script will install ppp and creates config files. wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial3/ppp-creator.sh chmod +x ./ppp-creator.sh sudo ./ppp-creator.sh INTERNET ttyUSB3 # INTERNET is APN, check your cellular Run sudo pppd call gprs run ifconfig ppp0 at terminal window to see following outputs and see your ip ``` ppp0 Link encap:Point-to-Point Protocol inet addr:XX.XX.XXX.XXX P-t-P:XX.XX.XX.XX Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1500 Metric:1 RX packets:38 errors:0 dropped:0 overruns:0 frame:0 TX packets:39 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:3065 (2.9 KiB) TX bytes:2657 (2.5 KiB) ```","title":"Make a PPP internet connection with 3G/LTE Shields on Raspberry Pi"},{"location":"ppp_connect/#make-a-ppp-internet-connection-with-3glte-shields-on-raspberry-pi","text":"You can use Sixfab 3G/LTE Shields to connect internet with PPP connection. You can use following transactions for work. Firstly, Connect your Raspberry Pi to internet and run sudo apt-get update to update your Raspberry Pi Make First Tutorial to add Quectel Module support to your kernel. Download ppp-creator.sh script and run. Script will install ppp and creates config files. wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial3/ppp-creator.sh chmod +x ./ppp-creator.sh sudo ./ppp-creator.sh INTERNET ttyUSB3 # INTERNET is APN, check your cellular Run sudo pppd call gprs run ifconfig ppp0 at terminal window to see following outputs and see your ip ``` ppp0 Link encap:Point-to-Point Protocol inet addr:XX.XX.XXX.XXX P-t-P:XX.XX.XX.XX Mask:255.255.255.255 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1500 Metric:1 RX packets:38 errors:0 dropped:0 overruns:0 frame:0 TX packets:39 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3 RX bytes:3065 (2.9 KiB) TX bytes:2657 (2.5 KiB) ```","title":"Make a PPP internet connection with 3G/LTE Shields on Raspberry Pi"},{"location":"pre-check/","text":"\ub4dc\ub77c\uc774\ube0c \uc124\uce58 \ubc0f \uc7a5\ube44\uc810\uac80 Original Raspbian Jessie kernel version 4.4 doesn't support Quectel EC25/UC20 modules, you can update your Raspberry Pi's kernel. Run sudo rpi-update command and update kernel your Raspberry pi Reboot your machine 1 pi > sudo reboot You can use your modem with /dev/ttyUSB3 1 #> ls / dev / ttyUSB * Issues: If ttyUSB3 does not appear under folder /dev/ when the 3G ( UC20 ) module is plugged in, and 'device not accepting device address XXX, error -71' appears on the 'dmesg' output, please change your USB cable. Reboot your machine kkk dsafasf","title":"\ub4dc\ub77c\uc774\ube0c \uc124\uce58 \ubc0f \uc7a5\ube44\uc810\uac80"},{"location":"pre-check/#_1","text":"Original Raspbian Jessie kernel version 4.4 doesn't support Quectel EC25/UC20 modules, you can update your Raspberry Pi's kernel. Run sudo rpi-update command and update kernel your Raspberry pi Reboot your machine 1 pi > sudo reboot You can use your modem with /dev/ttyUSB3 1 #> ls / dev / ttyUSB * Issues: If ttyUSB3 does not appear under folder /dev/ when the 3G ( UC20 ) module is plugged in, and 'device not accepting device address XXX, error -71' appears on the 'dmesg' output, please change your USB cable. Reboot your machine kkk dsafasf","title":"\ub4dc\ub77c\uc774\ube0c \uc124\uce58 \ubc0f \uc7a5\ube44\uc810\uac80"},{"location":"setting-raspberry/","text":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc900\ube44 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc124\uce58 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc774\ubbf8\uc9c0 \uad7d\uae30 SD CARD 8M \uc774\uc0c1\uc744 \uad6c\ud558\uc5ec, \uc774\ubbf8\uc9c0\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 ether \ud504\ub85c\uadf8\ub7a8\uc744 \uc774\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \uad7d\ub294\ub2e4. SD CARD\ub97c \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 SD \uce74\ub4dc \uc2ac\ub86f\uc5d0 \uc0bd\uc785\ud558\uc2dc\uace0, \ud0a4\ubcf4\ub4dc, \ub9c8\uc6b0\uc2a4, \ubaa8\ub2c8\ud130, \uc804\uc6d0\uc744 \uc5f0\uacb0\ud569\ub2c8\ub2e4. \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uae30\ubcf8 \uc124\uc815 COMMAND \ucc3d\uc744 \ud558\ub098 \uc624\ud508\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc740 \uba85\ub839\uc5b4\ub97c \uc218\ud589\ud55c\ub2e4. 1 pi > sudo raspi - config change User Password (default : raspberry) Localization options Chage Locale ko_KR(UTF8) Change Timezone Asia Seoul KeyBoard Generic 105-Key(Intel)PC Other Korea Korean-Korean(101-104 key compatible) The default for the keyboard layout No compose key No \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5c5\ub370\uc774\ud2b8 1 2 3 4 5 6 7 pi > sudo apt update pi > sudo apt upgrade pi > sudo apt install ibus pi > sudo apt install ibus - hangul pi > sudo apt install fonts - unfonts - core pi > sudo reboot 1.USB LTE Module SIM \uce74\ub4dc \uc7a5\ucc29 2.USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 USB \uc5f0\uacb0 3.wwan0 \uc774\ub354\ub137 Port \uc0dd\uc131 \ud655\uc778 1 pi > ifconfig 8.\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \ub2e4\ub978 \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 \uc0ac\uc6a9\uc911\uc9c0 1 2 3 pi > ifconfig pi > sudo ifconfig eth0 down pi > sudo ifconfig wlan0 down 3.libqmi-uitils \uc124\uce58 1 2 3 pi > sudo apt install libqmi - utils pi > sudo qmi - network / dev / cdc - wdm0 start pi > dhclient - v wwan0 1 2 3 4 5 * \uad6d\ub0b4 \uc8fc\uc694 APN \ubaa9\ub85d KT : lte . ktfwing . com SKT : lte . sktelecom . com , lte - internet . sktelecom . com , ltetab . sktelecom . com LG U + : internet . lguplus . co . kr 10.\uc774\ub354\ub137 \ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc\ud655\uc778 1 pi > ifconfig ppp0 10.\ud1b5\uc2e0\uc5f0\uacb0\uc0c1\ud0dc\ud655\uc778 1 2 pi > ping 8 . 8 . 8 . 8 # \uad6c\uae00 DNS \uc11c\ubc84 \uc8fc\uc18c pi > ping www . google . com # \uad6c\uae00 \uc6f9\uc0ac\uc774\ud2b8 \uc8fc\uc18c","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc900\ube44"},{"location":"setting-raspberry/#_1","text":"","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc900\ube44"},{"location":"setting-raspberry/#_2","text":"","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc124\uce58"},{"location":"setting-raspberry/#_3","text":"SD CARD 8M \uc774\uc0c1\uc744 \uad6c\ud558\uc5ec, \uc774\ubbf8\uc9c0\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 ether \ud504\ub85c\uadf8\ub7a8\uc744 \uc774\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \uad7d\ub294\ub2e4. SD CARD\ub97c \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 SD \uce74\ub4dc \uc2ac\ub86f\uc5d0 \uc0bd\uc785\ud558\uc2dc\uace0, \ud0a4\ubcf4\ub4dc, \ub9c8\uc6b0\uc2a4, \ubaa8\ub2c8\ud130, \uc804\uc6d0\uc744 \uc5f0\uacb0\ud569\ub2c8\ub2e4.","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc774\ubbf8\uc9c0 \uad7d\uae30"},{"location":"setting-raspberry/#_4","text":"COMMAND \ucc3d\uc744 \ud558\ub098 \uc624\ud508\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc740 \uba85\ub839\uc5b4\ub97c \uc218\ud589\ud55c\ub2e4. 1 pi > sudo raspi - config change User Password (default : raspberry) Localization options Chage Locale ko_KR(UTF8) Change Timezone Asia Seoul KeyBoard Generic 105-Key(Intel)PC Other Korea Korean-Korean(101-104 key compatible) The default for the keyboard layout No compose key No","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uae30\ubcf8 \uc124\uc815"},{"location":"setting-raspberry/#_5","text":"1 2 3 4 5 6 7 pi > sudo apt update pi > sudo apt upgrade pi > sudo apt install ibus pi > sudo apt install ibus - hangul pi > sudo apt install fonts - unfonts - core pi > sudo reboot 1.USB LTE Module SIM \uce74\ub4dc \uc7a5\ucc29 2.USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 USB \uc5f0\uacb0 3.wwan0 \uc774\ub354\ub137 Port \uc0dd\uc131 \ud655\uc778 1 pi > ifconfig 8.\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \ub2e4\ub978 \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 \uc0ac\uc6a9\uc911\uc9c0 1 2 3 pi > ifconfig pi > sudo ifconfig eth0 down pi > sudo ifconfig wlan0 down 3.libqmi-uitils \uc124\uce58 1 2 3 pi > sudo apt install libqmi - utils pi > sudo qmi - network / dev / cdc - wdm0 start pi > dhclient - v wwan0 1 2 3 4 5 * \uad6d\ub0b4 \uc8fc\uc694 APN \ubaa9\ub85d KT : lte . ktfwing . com SKT : lte . sktelecom . com , lte - internet . sktelecom . com , ltetab . sktelecom . com LG U + : internet . lguplus . co . kr 10.\uc774\ub354\ub137 \ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc\ud655\uc778 1 pi > ifconfig ppp0 10.\ud1b5\uc2e0\uc5f0\uacb0\uc0c1\ud0dc\ud655\uc778 1 2 pi > ping 8 . 8 . 8 . 8 # \uad6c\uae00 DNS \uc11c\ubc84 \uc8fc\uc18c pi > ping www . google . com # \uad6c\uae00 \uc6f9\uc0ac\uc774\ud2b8 \uc8fc\uc18c","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5c5\ub370\uc774\ud2b8"},{"location":"use-raspberry-ppp/","text":"PPPD \uc124\uce58 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0 LTE Module \uc5f0\uacb0 USB LTE Module SIM \uce74\ub4dc \uc7a5\ucc29 USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \ubaa8\ub2c8\ud130, \ud0a4\ubcf4\ub4dc, \ub9c8\uc6b0\uc2a4 \uc5f0\uacb0\ud55c\ub2e4. USB \uc5f0\uacb0\uc0c1\ud0dc \ud655\uc778 8.USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 (USB \uc5f0\uacb0) \ubc0f \ud655\uc778 1 2 pi > cd ~ --> \ud648\ub514\ub809\ud1a0\ub9ac \uc774\ub3d9 pi > ls / dev 9.ttyUSB1, ttyUSB2, ttyUSB3 \uc758 \uc5f0\uacb0 \uc0c1\ud0dc\ub97c \ud655\uc778\ud55c\ub2e4. ppp-make.sh linux scrip \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc0f \uc2e4\ud589 1 pi > wget http : // github / mmio / ppp - make . sh 1 2 3 pi > sudo apt intall ppp pi > sudo chmod + x . / ppp - ec25 - make . sh pi > sudo . / ppp - ec25 - make . sh lte - internet . sktelecom . com Note \"lte-internet.sktelecom.com\" \uc740 \uc778\ud130\ub137 \uc811\uc18d APN\uc744 \ub098\ud0c0\ub0b4\uba70 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uc2e0 SIM \uce74\ub4dc\uc5d0 \ub530\ub77c \ubcc0\uacbd\ub41c\ub2e4. APN \uc740 SIM \uce74\ub4dc\uc640 \ud568\uaed8 \uc81c\uacf5\ub41c\ub2e4. \uad6d\ub0b4 \uc8fc\uc694 APN \ubaa9\ub85d KT : lte.ktfwing.com SKT : lte.sktelecom.com, lte-internet.sktelecom.com, ltetab.sktelecom.com LG U+ : internet.lguplus.co.kr 8.\ub77c\uc988\ubca0\ub9ac\ud30c\uc774\uc758 \ub2e4\ub978 \uc778\ud130\ub137 \uc5f0\uacb0\ud3ec\ud2b8 \uc0ac\uc6a9 \uc911\uc9c0 \uc0ac\uc6a9\uc911\uc9c0 1 pi > ifconfig \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 \uc5f0\uacb0\ud3ec\ud2b8\uc758 \uc0ac\uc6a9\uc744 \uc911\uc9c0\ud55c\ub2e4. 1 2 3 pi > sudo ifconfig eth0 down pi > sudo ifconfig wlan0 down pi > sudo ifconfig wwan0 donw 9.PPP \ub370\ubaac \uc2e4\ud589 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0 1 pi > sudo pppd call lte 10.\uc774\ub354\ub137 \ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc\ud655\uc778 1 pi > ifconfig ppp0 10.\ud1b5\uc2e0\uc5f0\uacb0\uc0c1\ud0dc\ud655\uc778 1 2 pi > ping 8 . 8 . 8 . 8 # \uad6c\uae00 DNS \uc11c\ubc84 \uc8fc\uc18c pi > ping www . google . com # \uad6c\uae00 \uc6f9\uc0ac\uc774\ud2b8 \uc8fc\uc18c 1 import tensorflow as tf","title":"\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 PPP"},{"location":"use-raspberry-ppp/#pppd","text":"","title":"PPPD \uc124\uce58 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0"},{"location":"use-raspberry-ppp/#lte-module","text":"USB LTE Module SIM \uce74\ub4dc \uc7a5\ucc29 USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \ubaa8\ub2c8\ud130, \ud0a4\ubcf4\ub4dc, \ub9c8\uc6b0\uc2a4 \uc5f0\uacb0\ud55c\ub2e4.","title":"LTE Module \uc5f0\uacb0"},{"location":"use-raspberry-ppp/#usb","text":"8.USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 (USB \uc5f0\uacb0) \ubc0f \ud655\uc778 1 2 pi > cd ~ --> \ud648\ub514\ub809\ud1a0\ub9ac \uc774\ub3d9 pi > ls / dev 9.ttyUSB1, ttyUSB2, ttyUSB3 \uc758 \uc5f0\uacb0 \uc0c1\ud0dc\ub97c \ud655\uc778\ud55c\ub2e4.","title":"USB \uc5f0\uacb0\uc0c1\ud0dc \ud655\uc778"},{"location":"use-raspberry-ppp/#ppp-makesh-linux-scrip","text":"1 pi > wget http : // github / mmio / ppp - make . sh 1 2 3 pi > sudo apt intall ppp pi > sudo chmod + x . / ppp - ec25 - make . sh pi > sudo . / ppp - ec25 - make . sh lte - internet . sktelecom . com Note \"lte-internet.sktelecom.com\" \uc740 \uc778\ud130\ub137 \uc811\uc18d APN\uc744 \ub098\ud0c0\ub0b4\uba70 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uc2e0 SIM \uce74\ub4dc\uc5d0 \ub530\ub77c \ubcc0\uacbd\ub41c\ub2e4. APN \uc740 SIM \uce74\ub4dc\uc640 \ud568\uaed8 \uc81c\uacf5\ub41c\ub2e4. \uad6d\ub0b4 \uc8fc\uc694 APN \ubaa9\ub85d KT : lte.ktfwing.com SKT : lte.sktelecom.com, lte-internet.sktelecom.com, ltetab.sktelecom.com LG U+ : internet.lguplus.co.kr 8.\ub77c\uc988\ubca0\ub9ac\ud30c\uc774\uc758 \ub2e4\ub978 \uc778\ud130\ub137 \uc5f0\uacb0\ud3ec\ud2b8 \uc0ac\uc6a9 \uc911\uc9c0 \uc0ac\uc6a9\uc911\uc9c0 1 pi > ifconfig \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 \uc5f0\uacb0\ud3ec\ud2b8\uc758 \uc0ac\uc6a9\uc744 \uc911\uc9c0\ud55c\ub2e4. 1 2 3 pi > sudo ifconfig eth0 down pi > sudo ifconfig wlan0 down pi > sudo ifconfig wwan0 donw 9.PPP \ub370\ubaac \uc2e4\ud589 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0 1 pi > sudo pppd call lte 10.\uc774\ub354\ub137 \ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc\ud655\uc778 1 pi > ifconfig ppp0 10.\ud1b5\uc2e0\uc5f0\uacb0\uc0c1\ud0dc\ud655\uc778 1 2 pi > ping 8 . 8 . 8 . 8 # \uad6c\uae00 DNS \uc11c\ubc84 \uc8fc\uc18c pi > ping www . google . com # \uad6c\uae00 \uc6f9\uc0ac\uc774\ud2b8 \uc8fc\uc18c 1 import tensorflow as tf","title":"ppp-make.sh linux scrip \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc0f \uc2e4\ud589"},{"location":"use-raspberry-qmi/","text":"QMI \uc124\uce58 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0 1.USB LTE Module SIM \uce74\ub4dc \uc7a5\ucc29 2.USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 USB \uc5f0\uacb0 3.wwan0 \uc774\ub354\ub137 Port \uc0dd\uc131 \ud655\uc778 1 pi > ifconfig 8.\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \ub2e4\ub978 \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 \uc0ac\uc6a9\uc911\uc9c0 1 2 3 pi > ifconfig pi > sudo ifconfig eth0 down pi > sudo ifconfig wlan0 down 3.libqmi-uitils \uc124\uce58 1 2 3 pi > sudo apt install libqmi - utils pi > sudo qmi - network / dev / cdc - wdm0 start pi > dhclient - v wwan0 1 2 3 4 5 * \uad6d\ub0b4 \uc8fc\uc694 APN \ubaa9\ub85d KT : lte . ktfwing . com SKT : lte . sktelecom . com , lte - internet . sktelecom . com , ltetab . sktelecom . com LG U + : internet . lguplus . co . kr 10.\uc774\ub354\ub137 \ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc\ud655\uc778 1 pi > ifconfig ppp0 10.\ud1b5\uc2e0\uc5f0\uacb0\uc0c1\ud0dc\ud655\uc778 1 2 pi > ping 8 . 8 . 8 . 8 # \uad6c\uae00 DNS \uc11c\ubc84 \uc8fc\uc18c pi > ping www . google . com # \uad6c\uae00 \uc6f9\uc0ac\uc774\ud2b8 \uc8fc\uc18c","title":"QMI \uc124\uce58 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0"},{"location":"use-raspberry-qmi/#qmi","text":"1.USB LTE Module SIM \uce74\ub4dc \uc7a5\ucc29 2.USB LTE \ubaa8\ub4c8 \uacfc \ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \uc5f0\uacb0 USB \uc5f0\uacb0 3.wwan0 \uc774\ub354\ub137 Port \uc0dd\uc131 \ud655\uc778 1 pi > ifconfig 8.\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 \ub2e4\ub978 \uc778\ud130\ub137 \uc5f0\uacb0 \uc124\uc815 \uc0ac\uc6a9\uc911\uc9c0 1 2 3 pi > ifconfig pi > sudo ifconfig eth0 down pi > sudo ifconfig wlan0 down 3.libqmi-uitils \uc124\uce58 1 2 3 pi > sudo apt install libqmi - utils pi > sudo qmi - network / dev / cdc - wdm0 start pi > dhclient - v wwan0 1 2 3 4 5 * \uad6d\ub0b4 \uc8fc\uc694 APN \ubaa9\ub85d KT : lte . ktfwing . com SKT : lte . sktelecom . com , lte - internet . sktelecom . com , ltetab . sktelecom . com LG U + : internet . lguplus . co . kr 10.\uc774\ub354\ub137 \ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc\ud655\uc778 1 pi > ifconfig ppp0 10.\ud1b5\uc2e0\uc5f0\uacb0\uc0c1\ud0dc\ud655\uc778 1 2 pi > ping 8 . 8 . 8 . 8 # \uad6c\uae00 DNS \uc11c\ubc84 \uc8fc\uc18c pi > ping www . google . com # \uad6c\uae00 \uc6f9\uc0ac\uc774\ud2b8 \uc8fc\uc18c","title":"QMI \uc124\uce58 \ubc0f \uc778\ud130\ub137 \uc5f0\uacb0"}]}